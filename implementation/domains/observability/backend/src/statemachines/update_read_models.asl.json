{
  "Comment": "Update read models from events",
  "StartAt": "ProcessEvent",
  "States": {
    "ProcessEvent": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.detail-type",
          "StringEquals": "Metric Collected",
          "Next": "UpdateMetricReadModel"
        },
        {
          "Variable": "$.detail-type",
          "StringEquals": "Alert Triggered",
          "Next": "UpdateAlertReadModel"
        }
      ],
      "Default": "SkipEvent"
    },
    "UpdateMetricReadModel": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${MetricsTable}",
        "Item": {
          "pk": {
            "S.$": "$.detail.aggregate_id"
          },
          "sk": {
            "S.$": "$.detail.event_id"
          },
          "gsi1pk": {
            "S.$": "$.detail.event_data.name"
          },
          "gsi1sk": {
            "S.$": "$.detail.timestamp"
          },
          "metric_name": {
            "S.$": "$.detail.event_data.name"
          },
          "metric_value": {
            "N.$": "States.JsonToString($.detail.event_data.value)"
          },
          "metric_unit": {
            "S.$": "$.detail.event_data.unit"
          },
          "source": {
            "S.$": "$.detail.event_data.source"
          },
          "tags": {
            "M.$": "$.detail.event_data.tags"
          },
          "timestamp": {
            "S.$": "$.detail.timestamp"
          },
          "ttl": {
            "N.$": "States.JsonToString(States.MathAdd(States.StringToJson(States.ArrayGetItem(States.StringSplit($.detail.timestamp, 'T'), 0)), 2592000))"
          }
        }
      },
      "Next": "NotifyGraphQLUpdate",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ]
    },
    "UpdateAlertReadModel": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${AlertsTable}",
        "Item": {
          "pk": {
            "S.$": "$.detail.aggregate_id"
          },
          "sk": {
            "S.$": "$.detail.event_id"
          },
          "gsi1pk": {
            "S": "alert_triggered"
          },
          "gsi1sk": {
            "S.$": "$.detail.timestamp"
          },
          "alert_id": {
            "S.$": "$.detail.event_data.alert_id"
          },
          "metric_value": {
            "N.$": "States.JsonToString($.detail.event_data.metric_value)"
          },
          "threshold": {
            "N.$": "States.JsonToString($.detail.event_data.threshold)"
          },
          "severity": {
            "S.$": "$.detail.event_data.severity"
          },
          "timestamp": {
            "S.$": "$.detail.timestamp"
          },
          "ttl": {
            "N.$": "States.JsonToString(States.MathAdd(States.StringToJson(States.ArrayGetItem(States.StringSplit($.detail.timestamp, 'T'), 0)), 2592000))"
          }
        }
      },
      "Next": "NotifyGraphQLUpdate",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ]
    },
    "NotifyGraphQLUpdate": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint": "https://api.amplify.aws/graphql",
        "Method": "POST",
        "Headers": {
          "Content-Type": "application/json"
        },
        "RequestBody": {
          "query": "mutation NotifyReadModelUpdate($input: ReadModelUpdateInput!) { notifyReadModelUpdate(input: $input) { success } }",
          "variables": {
            "input": {
              "eventType.$": "$.detail-type",
              "aggregateId.$": "$.detail.aggregate_id",
              "timestamp.$": "$.detail.timestamp"
            }
          }
        }
      },
      "Next": "Success",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError"
        }
      ]
    },
    "SkipEvent": {
      "Type": "Pass",
      "Result": "Event type not supported",
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed",
      "Result": "Read model updated successfully"
    },
    "HandleError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Source": "skafu.observability",
            "DetailType": "Read Model Update Failed",
            "Detail": {
              "originalEvent.$": "$",
              "error.$": "$.Error",
              "cause.$": "$.Cause"
            },
            "EventBusName": "${ErrorBusName}"
          }
        ]
      },
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail",
      "Cause": "Failed to update read model"
    }
  }
}