AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Skafu - Observability Domain Stack'

Parameters:
  Environment:
    Type: String
    AllowedValues: [development, staging, production]
    Default: development
    Description: Environment name
  
  LogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARN, ERROR]
    Default: INFO
    Description: Lambda function log level
  
  EventBusName:
    Type: String
    Description: Custom EventBridge bus name from shared resources
  
  ErrorBusName:
    Type: String
    Description: Error EventBridge bus name from shared resources
  
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID from shared resources
  
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID from shared resources
  
  ApiGatewayId:
    Type: String
    Description: API Gateway ID from shared resources
  
  ApiGatewayRootResourceId:
    Type: String
    Description: API Gateway V1 Resource ID from shared resources

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: skafu-observability
        POWERTOOLS_METRICS_NAMESPACE: skafu
        LOG_LEVEL: !Ref LogLevel
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        ERROR_BUS_NAME: !Ref ErrorBusName
        USER_POOL_ID: !Ref UserPoolId
        USER_POOL_CLIENT_ID: !Ref UserPoolClientId
    Tracing: Active
    Layers:
      - !Ref PowertoolsLayer
    Tags:
      Environment: !Ref Environment
      Project: Skafu
      Domain: Observability
      ManagedBy: SAM

Resources:
  # AWS Lambda Powertools Layer
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'skafu-powertools-${Environment}'
      Description: AWS Lambda Powertools for Python
      ContentUri: ../../shared/layers/powertools/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12
  
  # API Gateway Resources
  ObservabilityResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'observability'
  
  MetricsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ObservabilityResource
      PathPart: 'metrics'
  
  AlertsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ObservabilityResource
      PathPart: 'alerts'
  
  SecurityEventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ObservabilityResource
      PathPart: 'security-events'
  
  SystemHealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ObservabilityResource
      PathPart: 'system-health'
  
  # Lambda Functions
  CollectMetricFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-collect-metric'
      CodeUri: backend/src/handlers/collect_metric/
      Handler: app.lambda_handler
      Environment:
        Variables:
          METRICS_TABLE: !Ref MetricsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MetricsTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/metrics
            Method: POST
  
  QueryMetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-query-metrics'
      CodeUri: backend/src/handlers/query_metrics/
      Handler: app.lambda_handler
      Environment:
        Variables:
          METRICS_TABLE: !Ref MetricsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MetricsTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/metrics
            Method: GET
  
  CreateAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-create-alert'
      CodeUri: backend/src/handlers/create_alert/
      Handler: app.lambda_handler
      Environment:
        Variables:
          ALERTS_TABLE: !Ref AlertsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AlertsTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/alerts
            Method: POST
  
  QueryAlertsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-query-alerts'
      CodeUri: backend/src/handlers/query_alerts/
      Handler: app.lambda_handler
      Environment:
        Variables:
          ALERTS_TABLE: !Ref AlertsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AlertsTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/alerts
            Method: GET
  
  QuerySecurityEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-query-security-events'
      CodeUri: backend/src/handlers/query_security_events/
      Handler: app.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - guardduty:GetFindings
                - guardduty:ListFindings
                - securityhub:GetFindings
              Resource: '*'
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/security-events
            Method: GET
  
  QuerySystemHealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'skafu-${Environment}-observability-query-system-health'
      CodeUri: backend/src/handlers/query_system_health/
      Handler: app.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:GetMetricStatistics
                - cloudwatch:GetMetricData
                - cloudwatch:ListMetrics
                - lambda:ListFunctions
                - lambda:GetFunction
                - dynamodb:DescribeTable
                - dynamodb:ListTables
              Resource: '*'
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayId
            Path: /api/v1/observability/system-health
            Method: GET
  
  # Step Functions for Read Model Updates
  UpdateReadModelsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: backend/src/statemachines/update_read_models.asl.json
      DefinitionSubstitutions:
        MetricsTable: !Ref MetricsTable
        AlertsTable: !Ref AlertsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MetricsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AlertsTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref ErrorBusName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource: '*'
      Events:
        MetricCollectedEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source: ["skafu.observability"]
              detail-type: ["Metric Collected"]
        AlertTriggeredEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source: ["skafu.observability"]
              detail-type: ["Alert Triggered"]
  
  # DynamoDB Tables for Read Models
  MetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'skafu-metrics-${Environment}'
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Skafu
        - Key: Domain
          Value: Observability
        - Key: ManagedBy
          Value: SAM
  
  AlertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'skafu-alerts-${Environment}'
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Skafu
        - Key: Domain
          Value: Observability
        - Key: ManagedBy
          Value: SAM

Outputs:
  MetricsTableName:
    Description: DynamoDB Metrics table name
    Value: !Ref MetricsTable
    Export:
      Name: !Sub '${AWS::StackName}-MetricsTableName'
  
  AlertsTableName:
    Description: DynamoDB Alerts table name
    Value: !Ref AlertsTable
    Export:
      Name: !Sub '${AWS::StackName}-AlertsTableName'
  
  UpdateReadModelsStateMachineArn:
    Description: Step Functions State Machine ARN for updating read models
    Value: !Ref UpdateReadModelsStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-UpdateReadModelsStateMachineArn'