title: GitHub Integration Domain Data Models
description: Data models and validation schemas for the GitHub Integration domain
version: 1.0.0

# JSON Schema definitions for GitHub Integration domain entities

schemas:
  # Core Repository Entity
  Repository:
    type: object
    required:
      - id
      - name
      - projectId
      - status
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier for the repository
        example: "123e4567-e89b-12d3-a456-426614174000"
      name:
        type: string
        minLength: 1
        maxLength: 100
        pattern: "^[a-zA-Z0-9._-]+$"
        description: Repository name
        example: "my-awesome-api"
      projectId:
        type: string
        format: uuid
        description: Project ID this repository belongs to
        example: "456e7890-e12b-34d5-a789-426614174001"
      status:
        $ref: "#/schemas/RepositoryStatus"
      visibility:
        type: string
        enum: [public, private, internal]
        description: Repository visibility
        example: "private"
      description:
        type: string
        maxLength: 1000
        description: Repository description
        example: "A scalable REST API built with Node.js and Express"
      topics:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 35
          pattern: "^[a-z0-9-]+$"
        maxItems: 20
        uniqueItems: true
        description: Repository topics/tags
        example: ["nodejs", "api", "microservice", "docker"]
      defaultBranch:
        type: string
        minLength: 1
        maxLength: 255
        description: Default branch name
        example: "main"
      githubUrl:
        type: string
        format: uri
        description: GitHub repository URL
        example: "https://github.com/user/my-awesome-api"
      cloneUrl:
        type: string
        format: uri
        description: Git clone URL
        example: "https://github.com/user/my-awesome-api.git"
      sshUrl:
        type: string
        description: SSH clone URL
        example: "git@github.com:user/my-awesome-api.git"
      size:
        type: integer
        minimum: 0
        description: Repository size in KB
        example: 1024
      language:
        type: string
        maxLength: 50
        description: Primary programming language
        example: "JavaScript"
      languages:
        type: object
        additionalProperties:
          type: number
          format: float
          minimum: 0
          maximum: 100
        description: Language breakdown percentages
        example:
          JavaScript: 75.5
          TypeScript: 20.3
          CSS: 3.2
          HTML: 1.0
      licenseInfo:
        $ref: "#/schemas/LicenseInfo"
      settings:
        $ref: "#/schemas/RepositorySettings"
      statistics:
        $ref: "#/schemas/RepositoryStatistics"
      webhooks:
        type: array
        items:
          $ref: "#/schemas/WebhookConfig"
        description: Configured webhooks
      collaborators:
        type: array
        items:
          $ref: "#/schemas/Collaborator"
        description: Repository collaborators
      deploymentKeys:
        type: array
        items:
          $ref: "#/schemas/DeploymentKey"
        description: Deployment keys for CI/CD
      createdAt:
        type: string
        format: date-time
        description: Timestamp when repository was created
        example: "2025-01-18T10:30:00.000Z"
      updatedAt:
        type: string
        format: date-time
        description: Timestamp when repository was last updated
        example: "2025-01-18T11:45:00.000Z"
      lastPushAt:
        type: string
        format: date-time
        description: Timestamp of last push
        example: "2025-01-18T11:45:00.000Z"
    additionalProperties: false

  RepositoryStatus:
    type: string
    enum:
      - pending
      - creating
      - active
      - archived
      - failed
      - suspended
    description: Current status of the repository
    example: "active"

  LicenseInfo:
    type: object
    properties:
      key:
        type: string
        description: License key identifier
        example: "mit"
      name:
        type: string
        description: License name
        example: "MIT License"
      spdxId:
        type: string
        description: SPDX license identifier
        example: "MIT"
      url:
        type: string
        format: uri
        description: License URL
        example: "https://api.github.com/licenses/mit"
      nodeId:
        type: string
        description: GitHub node ID
        example: "MDc6TGljZW5zZW1pdA=="
    additionalProperties: false

  RepositorySettings:
    type: object
    properties:
      hasIssues:
        type: boolean
        description: Whether issues are enabled
        example: true
      hasProjects:
        type: boolean
        description: Whether projects are enabled
        example: true
      hasWiki:
        type: boolean
        description: Whether wiki is enabled
        example: false
      hasDiscussions:
        type: boolean
        description: Whether discussions are enabled
        example: false
      hasDownloads:
        type: boolean
        description: Whether downloads are enabled
        example: true
      allowForking:
        type: boolean
        description: Whether forking is allowed
        example: true
      allowMergeCommit:
        type: boolean
        description: Whether merge commits are allowed
        example: true
      allowSquashMerge:
        type: boolean
        description: Whether squash merges are allowed
        example: true
      allowRebaseMerge:
        type: boolean
        description: Whether rebase merges are allowed
        example: true
      allowAutoMerge:
        type: boolean
        description: Whether auto-merge is allowed
        example: false
      deleteBranchOnMerge:
        type: boolean
        description: Whether to delete head branches on merge
        example: true
      allowUpdateBranch:
        type: boolean
        description: Whether to allow update branch
        example: true
      squashMergeCommitTitle:
        type: string
        enum: [COMMIT_OR_PR_TITLE, PR_TITLE]
        description: Squash merge commit title format
        example: "PR_TITLE"
      squashMergeCommitMessage:
        type: string
        enum: [PR_BODY, COMMIT_MESSAGES, BLANK]
        description: Squash merge commit message format
        example: "PR_BODY"
      mergeCommitTitle:
        type: string
        enum: [PR_TITLE, MERGE_MESSAGE]
        description: Merge commit title format
        example: "MERGE_MESSAGE"
      mergeCommitMessage:
        type: string
        enum: [PR_TITLE, PR_BODY, BLANK]
        description: Merge commit message format
        example: "PR_BODY"
      archived:
        type: boolean
        description: Whether repository is archived
        example: false
      disabled:
        type: boolean
        description: Whether repository is disabled
        example: false
    additionalProperties: false

  RepositoryStatistics:
    type: object
    properties:
      stargazersCount:
        type: integer
        minimum: 0
        description: Number of stargazers
        example: 42
      watchersCount:
        type: integer
        minimum: 0
        description: Number of watchers
        example: 8
      forksCount:
        type: integer
        minimum: 0
        description: Number of forks
        example: 12
      openIssuesCount:
        type: integer
        minimum: 0
        description: Number of open issues
        example: 5
      networkCount:
        type: integer
        minimum: 0
        description: Number of network repositories
        example: 12
      subscribersCount:
        type: integer
        minimum: 0
        description: Number of subscribers
        example: 8
      commitsCount:
        type: integer
        minimum: 0
        description: Total number of commits
        example: 156
      branchesCount:
        type: integer
        minimum: 0
        description: Number of branches
        example: 3
      releasesCount:
        type: integer
        minimum: 0
        description: Number of releases
        example: 2
      contributorsCount:
        type: integer
        minimum: 0
        description: Number of contributors
        example: 4
      codeFrequency:
        type: array
        items:
          type: array
          items:
            type: integer
          minItems: 3
          maxItems: 3
        description: Weekly commit activity [timestamp, additions, deletions]
        example: [[1640995200, 450, 123], [1641600000, 123, 45]]
      commitActivity:
        type: array
        items:
          type: object
          properties:
            days:
              type: array
              items:
                type: integer
              minItems: 7
              maxItems: 7
              description: Commits for each day of the week
            total:
              type: integer
              minimum: 0
              description: Total commits for the week
            week:
              type: integer
              description: Week timestamp
          required: [days, total, week]
        description: Weekly commit activity
      punchCard:
        type: array
        items:
          type: array
          items:
            type: integer
          minItems: 3
          maxItems: 3
        description: Hourly commit activity [day, hour, commits]
        example: [[0, 0, 5], [0, 1, 3], [1, 9, 12]]
    additionalProperties: false

  # Webhook Configuration
  WebhookConfig:
    type: object
    required:
      - id
      - url
      - events
      - active
    properties:
      id:
        type: string
        format: uuid
        description: Webhook configuration ID
        example: "789e1234-e56f-78d9-a012-426614174002"
      url:
        type: string
        format: uri
        description: Webhook URL
        example: "https://api.skafu.dev/webhooks/github"
      events:
        type: array
        items:
          type: string
          enum:
            - push
            - pull_request
            - issues
            - issue_comment
            - pull_request_review
            - pull_request_review_comment
            - commit_comment
            - create
            - delete
            - deployment
            - deployment_status
            - fork
            - gollum
            - member
            - membership
            - milestone
            - organization
            - page_build
            - project
            - project_card
            - project_column
            - public
            - release
            - repository
            - star
            - status
            - team
            - team_add
            - watch
            - workflow_dispatch
            - workflow_run
        uniqueItems: true
        description: GitHub events to subscribe to
        example: ["push", "pull_request", "issues"]
      active:
        type: boolean
        description: Whether webhook is active
        example: true
      secret:
        type: string
        maxLength: 200
        description: Webhook secret for verification
        example: "webhook-secret-key"
      contentType:
        type: string
        enum: [json, form]
        description: Content type for webhook payload
        example: "json"
      insecureSsl:
        type: boolean
        description: Whether to disable SSL verification
        example: false
      createdAt:
        type: string
        format: date-time
        description: Webhook creation timestamp
        example: "2025-01-18T10:30:00.000Z"
      updatedAt:
        type: string
        format: date-time
        description: Webhook update timestamp
        example: "2025-01-18T11:45:00.000Z"
      lastResponse:
        $ref: "#/schemas/WebhookResponse"
    additionalProperties: false

  WebhookResponse:
    type: object
    properties:
      code:
        type: integer
        description: HTTP response code
        example: 200
      status:
        type: string
        description: Response status
        example: "active"
      message:
        type: string
        maxLength: 1000
        description: Response message
        example: "OK"
      deliveredAt:
        type: string
        format: date-time
        description: Delivery timestamp
        example: "2025-01-18T11:45:00.000Z"
    additionalProperties: false

  # Collaborator Management
  Collaborator:
    type: object
    required:
      - id
      - login
      - permission
      - type
    properties:
      id:
        type: integer
        description: GitHub user ID
        example: 12345
      login:
        type: string
        minLength: 1
        maxLength: 39
        description: GitHub username
        example: "johndoe"
      nodeId:
        type: string
        description: GitHub node ID
        example: "MDQ6VXNlcjEyMzQ1"
      avatarUrl:
        type: string
        format: uri
        description: User avatar URL
        example: "https://avatars.githubusercontent.com/u/12345?v=4"
      gravatarId:
        type: string
        description: Gravatar ID
        example: ""
      url:
        type: string
        format: uri
        description: User API URL
        example: "https://api.github.com/users/johndoe"
      htmlUrl:
        type: string
        format: uri
        description: User profile URL
        example: "https://github.com/johndoe"
      type:
        type: string
        enum: [User, Bot]
        description: User type
        example: "User"
      siteAdmin:
        type: boolean
        description: Whether user is a site admin
        example: false
      permission:
        type: string
        enum: [read, write, admin, maintain, triage]
        description: Permission level
        example: "write"
      roleName:
        type: string
        description: Role name
        example: "Developer"
      addedAt:
        type: string
        format: date-time
        description: When collaborator was added
        example: "2025-01-18T10:30:00.000Z"
    additionalProperties: false

  # Deployment Key Management
  DeploymentKey:
    type: object
    required:
      - id
      - title
      - key
      - readOnly
      - verified
    properties:
      id:
        type: integer
        description: Deployment key ID
        example: 67890
      title:
        type: string
        minLength: 1
        maxLength: 100
        description: Key title
        example: "CI/CD Deploy Key"
      key:
        type: string
        description: SSH public key
        example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
      readOnly:
        type: boolean
        description: Whether key is read-only
        example: false
      verified:
        type: boolean
        description: Whether key is verified
        example: true
      url:
        type: string
        format: uri
        description: Key API URL
        example: "https://api.github.com/repos/user/repo/keys/67890"
      createdAt:
        type: string
        format: date-time
        description: Key creation timestamp
        example: "2025-01-18T10:30:00.000Z"
      lastUsedAt:
        type: string
        format: date-time
        description: Last usage timestamp
        example: "2025-01-18T11:45:00.000Z"
    additionalProperties: false

  # Workflow Management
  WorkflowRun:
    type: object
    required:
      - id
      - runNumber
      - status
      - conclusion
      - workflowId
      - createdAt
    properties:
      id:
        type: integer
        description: Workflow run ID
        example: 123456789
      runNumber:
        type: integer
        minimum: 1
        description: Run number
        example: 42
      runAttempt:
        type: integer
        minimum: 1
        description: Run attempt number
        example: 1
      status:
        type: string
        enum: [queued, in_progress, completed, waiting]
        description: Run status
        example: "completed"
      conclusion:
        type: string
        enum: [success, failure, neutral, cancelled, skipped, timed_out, action_required]
        description: Run conclusion
        example: "success"
      workflowId:
        type: integer
        description: Workflow ID
        example: 987654
      checkSuiteId:
        type: integer
        description: Check suite ID
        example: 456789
      checkSuiteNodeId:
        type: string
        description: Check suite node ID
        example: "MDEwOkNoZWNrU3VpdGU0NTY3ODk="
      url:
        type: string
        format: uri
        description: Run API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789"
      htmlUrl:
        type: string
        format: uri
        description: Run web URL
        example: "https://github.com/user/repo/actions/runs/123456789"
      pullRequests:
        type: array
        items:
          $ref: "#/schemas/PullRequestRef"
        description: Associated pull requests
      event:
        type: string
        description: Triggering event
        example: "push"
      headBranch:
        type: string
        description: Head branch name
        example: "main"
      headSha:
        type: string
        pattern: "^[a-f0-9]{40}$"
        description: Head commit SHA
        example: "abc123def456789012345678901234567890abcd"
      path:
        type: string
        description: Workflow file path
        example: ".github/workflows/ci.yml"
      displayTitle:
        type: string
        description: Display title
        example: "CI Pipeline"
      runStartedAt:
        type: string
        format: date-time
        description: Run start timestamp
        example: "2025-01-18T10:30:00.000Z"
      createdAt:
        type: string
        format: date-time
        description: Run creation timestamp
        example: "2025-01-18T10:30:00.000Z"
      updatedAt:
        type: string
        format: date-time
        description: Run update timestamp
        example: "2025-01-18T10:35:00.000Z"
      jobsUrl:
        type: string
        format: uri
        description: Jobs API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789/jobs"
      logsUrl:
        type: string
        format: uri
        description: Logs API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789/logs"
      checkSuiteUrl:
        type: string
        format: uri
        description: Check suite API URL
        example: "https://api.github.com/repos/user/repo/check-suites/456789"
      artifactsUrl:
        type: string
        format: uri
        description: Artifacts API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789/artifacts"
      cancelUrl:
        type: string
        format: uri
        description: Cancel API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789/cancel"
      rerunUrl:
        type: string
        format: uri
        description: Rerun API URL
        example: "https://api.github.com/repos/user/repo/actions/runs/123456789/rerun"
      workflowUrl:
        type: string
        format: uri
        description: Workflow API URL
        example: "https://api.github.com/repos/user/repo/actions/workflows/987654"
      headCommit:
        $ref: "#/schemas/GitCommit"
      repository:
        $ref: "#/schemas/MinimalRepository"
      headRepository:
        $ref: "#/schemas/MinimalRepository"
      actor:
        $ref: "#/schemas/SimpleUser"
      triggeringActor:
        $ref: "#/schemas/SimpleUser"
    additionalProperties: false

  PullRequestRef:
    type: object
    properties:
      url:
        type: string
        format: uri
        description: Pull request API URL
        example: "https://api.github.com/repos/user/repo/pulls/123"
      id:
        type: integer
        description: Pull request ID
        example: 123
      number:
        type: integer
        description: Pull request number
        example: 456
      head:
        $ref: "#/schemas/GitRef"
      base:
        $ref: "#/schemas/GitRef"
    additionalProperties: false

  GitRef:
    type: object
    properties:
      ref:
        type: string
        description: Git reference
        example: "refs/heads/main"
      sha:
        type: string
        pattern: "^[a-f0-9]{40}$"
        description: Commit SHA
        example: "abc123def456789012345678901234567890abcd"
      repo:
        $ref: "#/schemas/MinimalRepository"
    additionalProperties: false

  GitCommit:
    type: object
    properties:
      id:
        type: string
        pattern: "^[a-f0-9]{40}$"
        description: Commit SHA
        example: "abc123def456789012345678901234567890abcd"
      treeId:
        type: string
        pattern: "^[a-f0-9]{40}$"
        description: Tree SHA
        example: "def456abc789012345678901234567890abcdef1"
      message:
        type: string
        description: Commit message
        example: "Add new feature"
      timestamp:
        type: string
        format: date-time
        description: Commit timestamp
        example: "2025-01-18T10:30:00.000Z"
      author:
        $ref: "#/schemas/GitUser"
      committer:
        $ref: "#/schemas/GitUser"
    additionalProperties: false

  GitUser:
    type: object
    properties:
      name:
        type: string
        description: User name
        example: "John Doe"
      email:
        type: string
        format: email
        description: User email
        example: "john.doe@example.com"
      date:
        type: string
        format: date-time
        description: Action timestamp
        example: "2025-01-18T10:30:00.000Z"
    additionalProperties: false

  SimpleUser:
    type: object
    properties:
      login:
        type: string
        description: GitHub username
        example: "johndoe"
      id:
        type: integer
        description: GitHub user ID
        example: 12345
      nodeId:
        type: string
        description: GitHub node ID
        example: "MDQ6VXNlcjEyMzQ1"
      avatarUrl:
        type: string
        format: uri
        description: User avatar URL
        example: "https://avatars.githubusercontent.com/u/12345?v=4"
      gravatarId:
        type: string
        description: Gravatar ID
        example: ""
      url:
        type: string
        format: uri
        description: User API URL
        example: "https://api.github.com/users/johndoe"
      htmlUrl:
        type: string
        format: uri
        description: User profile URL
        example: "https://github.com/johndoe"
      type:
        type: string
        enum: [User, Bot]
        description: User type
        example: "User"
      siteAdmin:
        type: boolean
        description: Whether user is a site admin
        example: false
    additionalProperties: false

  MinimalRepository:
    type: object
    properties:
      id:
        type: integer
        description: Repository ID
        example: 123456
      nodeId:
        type: string
        description: Repository node ID
        example: "MDEwOlJlcG9zaXRvcnkxMjM0NTY="
      name:
        type: string
        description: Repository name
        example: "my-awesome-api"
      fullName:
        type: string
        description: Repository full name
        example: "user/my-awesome-api"
      private:
        type: boolean
        description: Whether repository is private
        example: true
      owner:
        $ref: "#/schemas/SimpleUser"
      htmlUrl:
        type: string
        format: uri
        description: Repository web URL
        example: "https://github.com/user/my-awesome-api"
      description:
        type: string
        description: Repository description
        example: "A scalable REST API"
      fork:
        type: boolean
        description: Whether repository is a fork
        example: false
      url:
        type: string
        format: uri
        description: Repository API URL
        example: "https://api.github.com/repos/user/my-awesome-api"
    additionalProperties: false

  # Rate Limiting
  RateLimitInfo:
    type: object
    properties:
      limit:
        type: integer
        minimum: 0
        description: Rate limit maximum
        example: 5000
      remaining:
        type: integer
        minimum: 0
        description: Remaining requests
        example: 4999
      reset:
        type: integer
        description: Reset timestamp
        example: 1642684800
      used:
        type: integer
        minimum: 0
        description: Used requests
        example: 1
      resource:
        type: string
        description: Rate limit resource
        example: "core"
    additionalProperties: false

  # API Response Metadata
  GitHubApiResponse:
    type: object
    properties:
      status:
        type: integer
        description: HTTP status code
        example: 200
      url:
        type: string
        format: uri
        description: Request URL
        example: "https://api.github.com/repos/user/repo"
      headers:
        type: object
        properties:
          server:
            type: string
            example: "GitHub.com"
          date:
            type: string
            format: date-time
            example: "2025-01-18T10:30:00.000Z"
          contentType:
            type: string
            example: "application/json; charset=utf-8"
          contentLength:
            type: integer
            example: 1024
          connection:
            type: string
            example: "keep-alive"
          cacheControl:
            type: string
            example: "private, max-age=60, s-maxage=60"
          vary:
            type: string
            example: "Accept, Authorization, Cookie, X-GitHub-OTP"
          etag:
            type: string
            example: "\"abc123def456789012345678901234567890abcd\""
          lastModified:
            type: string
            format: date-time
            example: "2025-01-18T10:30:00.000Z"
          xRatelimitLimit:
            type: integer
            example: 5000
          xRatelimitRemaining:
            type: integer
            example: 4999
          xRatelimitReset:
            type: integer
            example: 1642684800
          xRatelimitUsed:
            type: integer
            example: 1
          xRatelimitResource:
            type: string
            example: "core"
        additionalProperties: false
      rateLimitInfo:
        $ref: "#/schemas/RateLimitInfo"
      data:
        description: Response data
      pagination:
        type: object
        properties:
          first:
            type: string
            format: uri
            description: First page URL
          prev:
            type: string
            format: uri
            description: Previous page URL
          next:
            type: string
            format: uri
            description: Next page URL
          last:
            type: string
            format: uri
            description: Last page URL
        additionalProperties: false
    additionalProperties: false

  # Error Handling
  GitHubApiError:
    type: object
    required:
      - message
      - documentationUrl
    properties:
      message:
        type: string
        description: Error message
        example: "Not Found"
      documentationUrl:
        type: string
        format: uri
        description: Documentation URL
        example: "https://docs.github.com/rest/reference/repos#get-a-repository"
      status:
        type: string
        description: HTTP status
        example: "404"
      errors:
        type: array
        items:
          type: object
          properties:
            resource:
              type: string
              description: Resource type
              example: "Repository"
            field:
              type: string
              description: Field name
              example: "name"
            code:
              type: string
              description: Error code
              example: "missing_field"
            message:
              type: string
              description: Field error message
              example: "Name is required"
          additionalProperties: false
        description: Validation errors
    additionalProperties: false

# Validation constraints and business rules
validationRules:
  - rule: "Repository name must be unique within the organization"
    constraint: "UNIQUE(repository.name) WHERE repository.projectId = :projectId"
  
  - rule: "Repository must have a valid GitHub URL"
    constraint: "repository.githubUrl MATCHES '^https://github.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$'"
  
  - rule: "Default branch must exist"
    constraint: "repository.defaultBranch IS NOT NULL AND repository.defaultBranch != ''"
  
  - rule: "Webhook URL must be accessible"
    constraint: "webhook.url MATCHES '^https?://[a-zA-Z0-9.-]+(/.*)?$'"
  
  - rule: "Deployment keys must be unique per repository"
    constraint: "UNIQUE(deploymentKey.key) WHERE deploymentKey.repositoryId = :repositoryId"
  
  - rule: "Collaborator permissions must be valid"
    constraint: "collaborator.permission IN ['read', 'write', 'admin', 'maintain', 'triage']"
  
  - rule: "Repository topics must be lowercase"
    constraint: "ALL(topic IN repository.topics) WHERE topic MATCHES '^[a-z0-9-]+$'"
  
  - rule: "Webhook events must be valid GitHub events"
    constraint: "ALL(event IN webhook.events) WHERE event IN VALID_GITHUB_EVENTS"

# Common patterns and examples
examples:
  # Example repository creation
  CreateRepositoryRequest:
    name: "my-awesome-api"
    projectId: "456e7890-e12b-34d5-a789-426614174001"
    description: "A scalable REST API built with Node.js and Express"
    visibility: "private"
    topics: ["nodejs", "api", "microservice", "docker"]
    defaultBranch: "main"
    settings:
      hasIssues: true
      hasProjects: true
      hasWiki: false
      allowForking: true
      allowMergeCommit: true
      allowSquashMerge: true
      allowRebaseMerge: true
      deleteBranchOnMerge: true
    webhooks:
      - url: "https://api.skafu.dev/webhooks/github"
        events: ["push", "pull_request", "issues"]
        active: true
        secret: "webhook-secret-key"
        contentType: "json"

  # Example webhook configuration
  WebhookConfigExample:
    url: "https://api.skafu.dev/webhooks/github"
    events: ["push", "pull_request", "issues", "deployment"]
    active: true
    secret: "webhook-secret-key"
    contentType: "json"
    insecureSsl: false

  # Example collaborator
  CollaboratorExample:
    login: "johndoe"
    permission: "write"
    type: "User"
    roleName: "Developer"

  # Example deployment key
  DeploymentKeyExample:
    title: "CI/CD Deploy Key"
    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7hr4i37RXVTkAsHI1k..."
    readOnly: false

  # Example workflow run
  WorkflowRunExample:
    runNumber: 42
    status: "completed"
    conclusion: "success"
    event: "push"
    headBranch: "main"
    headSha: "abc123def456789012345678901234567890abcd"
    path: ".github/workflows/ci.yml"
    displayTitle: "CI Pipeline"

  # Example rate limit response
  RateLimitExample:
    limit: 5000
    remaining: 4999
    reset: 1642684800
    used: 1
    resource: "core"

  # Example API error
  ApiErrorExample:
    message: "Repository not found"
    documentationUrl: "https://docs.github.com/rest/reference/repos#get-a-repository"
    status: "404"
    errors:
      - resource: "Repository"
        field: "name"
        code: "missing"
        message: "Repository does not exist"